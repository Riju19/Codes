/*
 the solution uses a fast pointer (traversing the list two items at a time) and a slow pointer (traversing the list one item at a time). If there is a loop, then the fast pointer will go around the loop twice as fast as the slow pointer. At one point, these two pointers will point to the same item.
*/


int detectloop(Node *head)
{ 
    Node *slowNode, *fastNode;
    slowNode = fastNode = head;
    while( slowNode && fastNode && fastNode->next )
    {
        if( slowNode == fastNode->next || slowNode == fastNode->next->next )
        {
            return 1;
        }
        slowNode = slowNode->next;
        fastNode = fastNode->next->next;
    }
    return 0;
}
